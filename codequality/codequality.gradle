apply plugin: "java" // https://stackoverflow.com/a/43875557
apply plugin: "checkstyle"
apply plugin: "pmd"
apply plugin: 'com.github.spotbugs'
apply plugin: "jacoco"
// https://www.javacodegeeks.com/2020/03/pit-junit-5-and-gradle-with-just-one-extra-line-of-configuration.html
// https://stackoverflow.com/questions/62323783/pitest-issue-property-mainclass-is-final-and-cannot-be-changed-any-further
apply plugin: 'info.solidsoft.pitest'

def checkstyleToolVersion = '10.7.0'
def pmdToolVersion = '6.54.0'
def jacocoToolVersion = '0.8.8'
def junit5PitestPluginVersion = '1.1.1'

checkstyle {
    toolVersion "${checkstyleToolVersion}"
    configFile = file("${project.rootDir}/codequality/checkstyle.xml")
}

pmd {
    toolVersion = "${pmdToolVersion}"
    consoleOutput = true
    incrementalAnalysis = true
    ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
}

spotbugsMain {
    reportLevel = "medium"
    effort = "max"
    reports {
        xml.enabled = false
        html.enabled = true
    }
    excludeFilter.set(file('codequality/spotbugsMain-exclude.xml'))
}

spotbugsTest {
    reportLevel = "medium"
    effort = "min"
    reports {
        xml.enabled = false
        html.enabled = true
    }
    excludeFilter.set(file('codequality/spotbugsTest-exclude.xml'))
}

jacoco {
    toolVersion "${jacocoToolVersion}"
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:jacoco_report_violation_rules
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        html.destination file("$buildDir/reports/jacoco")
    }

    // classDirectories and not sourceDirectories should be used, coz JaCoCo works with .class files
    // https://stackoverflow.com/a/59474116
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                              // does not worth testing
                              '**/entity/**',
                              '**/dto/**',
                              '**/MongodbPgApplication**',
                              // auto-generated by MapStruct
                              '**/mapper/*MapperImpl*',
                    ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        failOnViolation = true
        afterEvaluate {
            classDirectories.setFrom(tasks.jacocoTestReport.classDirectories)
        }
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }

        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}

test {
    dependsOn checkstyleMain
    dependsOn checkstyleTest
    dependsOn pmdMain
    dependsOn pmdTest
    dependsOn spotbugsMain
    dependsOn spotbugsTest

    finalizedBy jacocoTestCoverageVerification // report is always generated after tests run
}

// https://pitest.org/quickstart/commandline/
pitest {
    junit5PluginVersion = "${junit5PitestPluginVersion}"
    mutationThreshold = 80
    timestampedReports = false
    excludedClasses = [
            'org.iaulitin.mongodbpg.entity.**',
            'org.iaulitin.mongodbpg.dto.**',
            'org.iaulitin.mongodbpg.MongodbPgApplication',
            'org.iaulitin.mongodbpg.mapper.*MapperImpl',
    ]
}